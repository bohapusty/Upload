# -*- coding: utf-8 -*-
"""
/***************************************************************************
 upload
                                 A QGIS plugin
 upload file to server
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-02-19
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Jozef
        email                : j.fabry24@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QMessageBox
from qgis.core import *

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .upload_dialog import uploadDialog
import os

import ftplib


class upload:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'upload_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Create the dialog (after translation) and keep reference
        self.dlg = uploadDialog()

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Upload')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('upload', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/upload/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Upload'),
            callback=self.run,
            parent=self.iface.mainWindow())

        self.restoreParam()
        self.dlg.testC.clicked.connect(self.testConn)

        # will be set False in run()
        self.first_start = True

    def checkConnFTP(self):
        
        host = self.dlg.serverHost.text()
        userName = self.dlg.userName.text()
        password = self.dlg.userPass.text()
        port = int(self.dlg.serverPort.text())

        QSettings().setValue("lastHost", self.dlg.serverHost.text())
        QSettings().setValue("lastName", self.dlg.userName.text())
        QSettings().setValue("lastPass", self.dlg.userPass.text())
        QSettings().setValue("lastPort", self.dlg.serverPort.text())

        serv = ftplib.FTP()
        serv.connect(host=host, port=port)

        serv.login(user=userName, passwd=password)

        QMessageBox.information(None,'QMessageBox.information()', "FTP connection succesfully stabilished...", QMessageBox.Ok, QMessageBox.Ok)

        serv.quit()

        ftplib.FTP.quit
    
    
    """ def loadLayers(self):
        layNam = [lay.name() for lay in QgsProject.instance().mapLayers().values()]
        print(layNam)

        path = [layer.source() for layer in QgsProject.instance().mapLayers().values()]

        for i in path:
            print(i) """

    def sendLayers(self):
        host = self.dlg.serverHost.text()
        userName = self.dlg.userName.text()
        password = self.dlg.userPass.text()
        port = int(self.dlg.serverPort.text())

        path = [layer for layer in QgsProject.instance().mapLayers().values()]
        
        projPath = QgsProject.instance().fileName()
        remoteProjPath = os.path.basename(projPath)

        out_dir = '/'

        serv = ftplib.FTP()

        serv.connect(host=host, port=port)
        serv.login(user=userName, passwd=password)

        serv.cwd(out_dir)

        fp = open(projPath, "rb")
        serv.storbinary('STOR' + ' ' + remoteProjPath, fp)

        ext = ['.shp', '.shx', '.dbf', '.prj', '.cpg']
        for lay in path:
            if lay.type() == QgsMapLayer.VectorLayer:
                for e in ext:
                    fileToUpload = os.path.splitext(lay.source())[0] + e

                    base = os.path.basename(lay.source())
                    saveName = os.path.splitext(base)[0]

                    saveNameExt = (saveName + e)
                    
                    print("uploading %s" % (saveNameExt))

                    fp = open(fileToUpload, "rb")
                    serv.storbinary('STOR' + ' ' + saveNameExt, fp)
        serv.quit

    def testConn(self):
        host = self.dlg.serverHost.text()
        userName = self.dlg.userName.text()
        password = self.dlg.userPass.text()
        port = int(self.dlg.serverPort.text())

        serv = ftplib.FTP()

        serv.connect(host=host, port=port)
        serv.login(user=userName, passwd=password)

        QMessageBox.information(None,'QMessageBox.information()', "FTP connection succesfully stabilished...", QMessageBox.Ok, QMessageBox.Ok)

        serv.quit
    
    def restoreParam(self):
        self.dlg.serverHost.setText(QSettings().value("lastHost"))
        self.dlg.userName.setText(QSettings().value("lastName"))
        self.dlg.userPass.setText(QSettings().value("lastPass"))
        self.dlg.serverPort.setText(QSettings().value("lastPort"))
    
    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Upload'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.

            if self.dlg.selectFTP.isChecked():
                self.checkConnFTP()
            
            self.sendLayers()